# -*- coding: utf-8 -*-
"""visualisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2I-eefZuMMKsBgxli5z_8AddNwxkuSg
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from wordcloud import WordCloud
from nltk.corpus import stopwords
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from arabic_reshaper import reshape
from bidi.algorithm import get_display
import itertools
from typing import Iterable, Tuple
import pandas_profiling
# %matplotlib inline

pip install python-bidi

pip install arabic-reshaper

df_ar = pd.read_csv("data.csv")

print(df_ar.head(10))

df_ar_op = df_ar[df_ar['sentiment'] == 'negative']
df_ar_op.reset_index(drop=True, inplace=True)

df_ar_su = df_ar[df_ar['sentiment'] == 'positive']
df_ar_su.reset_index(drop=True, inplace=True)

df_ar_neu = df_ar[df_ar['sentiment'] == 'neutral']
df_ar_neu.reset_index(drop=True, inplace=True)

colors=['#c62828', '#2e7d32', '#329d9c']
labels=['Negative','Positve','Neutral']
plt.rcParams['axes.labelsize'] = 20
fig,(ax1,ax2) = plt.subplots(nrows=2, ncols=1, figsize=(16,8))
pieWedgesCollection1 = ax1.pie([len(df_ar_op), len(df_ar_su), len(df_ar_neu)], labels=labels, colors=colors,autopct='%.0f%%')
for l, p in zip(pieWedgesCollection1[1], pieWedgesCollection1[2]):
    l.set_fontsize(15)
    p.set_fontsize(15)
ax1.set_title("Arabic",fontsize=25)
ttl01 = ax1.title
#ttl01.set_position([.5, 0.95])
#fig.tight_layout()

def top_words_dict(txt: str, stop_words:list) -> dict:
    top_words = {}
    for w in txt.split():
        if w in stop_words:
            continue
        elif w not in top_words:
            top_words[w] = 1
        else:
            top_words[w] += 1
    return {k: v for k, v in sorted(top_words.items(), key=lambda item: item[1], reverse = True)}

def take(n: int, iterable: Iterable) -> list:
    "Return first n items of the iterable as a list."
    return list(itertools.islice(iterable, n))

def reshape_data(l: list) -> dict:
  return {get_display(reshape(t[0])) : t[1] for t in l}

import nltk
text = " ".join(review for review in df_ar['clean_text'])
stop_ar = stopwords.words('arabic')
stop_ar = stop_ar + ['و', 'قاسم', 'سليماني', 'ان', 'الى', '..', '.', '،', ':', 'او', 'ل', 'قبل', '...', 'اي', '|', '"', 'Soleimani', '!', '؟', '?', '!!', 'الله', 'العراق', 'ايران']
top_words = top_words_dict(txt=text, stop_words=stop_ar)
for_wc = take(400, top_words.items())
dic_data = reshape_data(for_wc)

nltk.download('stopwords')

def plot_wordCloud(color: str, font_path: str, language:str, sentiment:str, data:dict, size:Tuple[int, int]=(16,8), title_size: int =30) -> None:
        wc = WordCloud(background_color=color, width=1600, height=800,max_words=400, font_path=font_path).generate_from_frequencies(data)
        plt.figure(figsize=size)
        plt.imshow(wc, interpolation='bilinear')
        plt.axis("off")
        plt.title(f'{language} Tweets - {sentiment} the Assassination', fontsize = title_size, y=1.05)
        #plt.savefig(f"figs/wordcloud_{language}_{sentiment}.png", dpi=300);

plot_wordCloud(color="white", font_path='/content/Shoroq.ttf', language='Arabic', sentiment='positive', data=dic_data)

plot_wordCloud(color="white", font_path='/content/Shoroq.ttf', language='Arabic', sentiment='negative', data=dic_data)

plot_wordCloud(color="white", font_path='/content/Shoroq.ttf', language='Arabic', sentiment='neutral', data=dic_data)





